version: 2.1

#Reusable pieces of value here
parameters:
  package_version:
    type: string
    default: "0.0.0-SNAPSHOT"

  params_file:
    type: string
    default: "params/parameters.list"

  workspace_path:
    type: string
    default: "/tmp/workspace"

  work_dir:
    type: string
    default: "onix-core-lib"

  work_key:
    type: string
    default: "onix-core-lib"    

  nuget_api:
    type: string
    default: "https://api.nuget.org/v3/index.json"  

  package_path:
    type: string
    default: "OnixCore/bin/Release"

  nuget_key:
    type: string
    default: "oy2nkpvkrxmkd3g6axdqhxzuzlxzreuebchf22q5ffvn7u"

  sonar_key:
    type: string
    default: "ceb5eeec9aecce697e659fce520eb98f05c92920"

#Reusable pieces of code here
commands:
  populate_params:
    description: "Setup custom environment variables"
    steps:
      - run: 
          name: "Setup custom environment variables"
          command: |
            while read p; do
              VAR_KEY=$(echo "$p" | cut -d "=" -f 1)
              VAR_VAL=$(echo "$p" | cut -d "=" -f 2)

              echo "export ${VAR_KEY}=${VAR_VAL}" >> $BASH_ENV
              echo "Populating with : ${VAR_KEY}=${VAR_VAL}"
            done < << pipeline.parameters.workspace_path >>/<< pipeline.parameters.params_file >>


# Workflow and jobs start here
workflows:
  version: 2

  btd:
    jobs:
      - initialize
      - sonar_scan:
          requires:
            - initialize
      - build:
          requires:
            - sonar_scan
      - nuget_upload:
          requires:
            - build

jobs:
  initialize:
    working_directory: ~/<< pipeline.parameters.work_dir >>
    docker:
      - image: circleci/python:3.8
    steps:
      - run: mkdir -p params

      #Branches should be : devlopment, release/1.0.1, master, feature/JIRA00001
      - run: |      
          BT=$(echo ${CIRCLE_BRANCH} | cut -d '/' -f 1)
          DESC=$(echo ${CIRCLE_BRANCH} | cut -d '/' -f 2)
          VERSION=<< pipeline.parameters.package_version >>

          if [ "${BT}" == 'release' ]
          then
            NAME=${VERSION}-${BT}
          elif [ "${BT}" == 'master' ]
          then
            NAME=${VERSION}
          elif [ "${BT}" == 'trunk' ]
          then
            NAME=${VERSION}-${BT}-${CIRCLE_BUILD_NUM}    
          else
            NAME=${VERSION}-${BT}-${DESC}-${CIRCLE_BUILD_NUM}
          fi

          echo "PACKAGE_NAME=${NAME}" >> << pipeline.parameters.params_file >>
          echo "BRANCH_TYPE=${BT}" >> << pipeline.parameters.params_file >>
          echo "PACKAGE_VERSION=${VERSION}" >> << pipeline.parameters.params_file >>
      - persist_to_workspace:
          root: .
          paths:
            - params

  sonar_scan:
    working_directory: ~/<< pipeline.parameters.work_dir >>
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.0

    steps:
      - attach_workspace:
          at: << pipeline.parameters.workspace_path >>

      - populate_params

      - checkout

      - run:
          name: Sonar Scanner
          command: | 
            dotnet sonarscanner begin \
            /key:pjamenaja_onix-core \
            /o:pjamenaja \
            /v:${BUILT_VERSION} \
            /d:sonar.host.url=https://sonarcloud.io \
            /d:sonar.branch.name=${CIRCLE_BRANCH} \
            /d:sonar.cs.opencover.reportsPaths=./coverage.opencover.xml \
            /d:sonar.javascript.exclusions=**/bootstrap/**,**/jquery/**,**/jquery-validation/**,**/jquery-validation-unobtrusive/** \
            /d:sonar.verbose=true \
            /d:sonar.scm.provider=git \
            /d:sonar.login=<< pipeline.parameters.sonar_key >>

  build:
    working_directory: ~/<< pipeline.parameters.work_dir >>
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.0

    steps:
      - attach_workspace:
          at: << pipeline.parameters.workspace_path >>

      - populate_params

      - checkout

      - run:
          name: Restore Packages
          command: dotnet restore

      - run:
          name: Build Packages
          command: dotnet build OnixCore.sln -c Release -p:Version=${PACKAGE_NAME}            
      
      - persist_to_workspace:
          root: .
          paths:
            - << pipeline.parameters.package_path >>

  nuget_upload:
    working_directory: ~/<< pipeline.parameters.work_dir >>
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.0

    steps:
      - attach_workspace:
          at: << pipeline.parameters.workspace_path >>

      - populate_params

      - run: find << pipeline.parameters.workspace_path >> -name *

      - run:
          name: Publish Packages
          command: |
            dotnet nuget \
            push << pipeline.parameters.workspace_path >>/<< pipeline.parameters.package_path >>/OnixCore.${PACKAGE_NAME}.nupkg \
            -k << pipeline.parameters.nuget_key >> \
            -s << pipeline.parameters.nuget_api >>